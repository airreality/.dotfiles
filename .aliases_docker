#!/usr/bin/env bash

# list docker images
alias dls="docker image ls --format='table {{.ID}}\t{{.Repository}}\t{{.Tag}}'"

# go into container
dbash() {
    docker exec -it $@ bash > /dev/null || if [ $? -eq 126 ]; then docker exec -it $@ sh; fi
}

# find container by parts of name
dps() {
	args=""
	filter=""
	for arg in $@; do
		if [[ "$arg" =~ '^-.+' ]]; then
			args="${args}${arg} "
		else
			filter="${filter}${arg}.*"
		fi
	done
	args=$(echo $args | xargs)
	if [ -z "$filter" ]; then
		docker ps ${args} --format="table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Image}}"
	else
		docker ps ${args} -q --filter "name=${filter}"
	fi
}

# find container by id or parts of name
dcheck() {
    if [ $# -eq 0 ]; then
        echo "No args" && return 1
    else
        container=$(dps -a $@)
        if [ -z $container ]; then
            container=$(docker ps -aq --filter "id=$@")
        fi
        if [ -z $container ]; then
            echo "No such container" && return 1
        elif [ $(echo $container | wc -l) -gt 1 ]; then
            echo "Ambigious query" && return 1
        fi
    fi
} 

# go into container
dgo() {
	dcheck $@ && dbash $container
}

# stop and delete container
drm() {
    dcheck $@ && docker stop $container && docker rm $container
}

# delete all images
dirm() {
    if [ $(docker image ls | wc -l) -ge 2 ]; then
        docker image rm  $(docker image ls --format={{.ID}})
    fi
}

# go into mysql
dmysql() {
    docker exec -it $(dps mysql) sh -c "mysql -u root -p'\$(printenv MYSQL_ROOT_PASSWORD)' $@"
}

# go into redis
dredis() {
    db=$(dmysql -NB -e "SHOW DATABASES LIKE 'dci_%';" | grep -v 'Warning' | tr -d '\r')
    redis_params=($(dmysql -NB $db -e "SELECT JSON_UNQUOTE(params_redis->'$.password'), params_redis->'$.port' FROM dci_location;" | grep -v 'Warning' | tr -d '\r'))
    redis_password=$(echo $redis_params[1])
    redis_port=$(echo $redis_params[2])
    docker exec -it $(dps redis) redis-cli -p $redis_port -a $redis_password $@
}
